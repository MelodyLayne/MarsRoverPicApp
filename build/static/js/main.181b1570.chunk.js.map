{"version":3,"sources":["APIdataJSONS/.keys.js","Components/Rover/index.js","Components/Header/idex.js","Components/Mars/index.js","App.js","index.js","theme/index.js"],"names":["API_KEY","Rover","props","date","imagesArray","images","index","image","camera","rover","indexOf","push","console","log","imageTotal","length","className","map","id","key","src","alt","Header","today","Date","roverList","Mars","useState","marsPics","setMarsPics","rovers","setRover","roverMessage","setRoverMessage","startDate","setStartDate","endDate","setEndDate","roverSelected","setRoverSelected","setDate","useEffect","axios","get","then","res","data","latest_photos","num","i","photo","forEach","n","img_src","full_name","name","earth_date","catch","err","error","onClick","e","target","idx","filter","toLowerCase","photo_manifest","landing_date","max_date","type","min","max","value","onChange","dateChoice","preventDefault","photos","App","ReactDOM","render","theme","primaryColor","secondaryColor","tertiaryColor","black","white","breakpointMobile","document","getElementById"],"mappings":"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","file":"static/js/main.181b1570.chunk.js","sourcesContent":["export const API_KEY = `bd0FD0AbSf4p0bQrvyDYPoleF38ynj8KejufG8V5`;\n/* This is the original link to make api calls to the mars rover api to.\nhttps://api.nasa.gov/planetary/apod?api_key=bd0FD0AbSf4p0bQrvyDYPoleF38ynj8KejufG8V5\n\nhttps://api.nasa.gov/mars-photos/api/v1/rovers/perseverance/photos?earth_date=2021-2-18&camera=skycam&api_key=bd0FD0AbSf4p0bQrvyDYPoleF38ynj8KejufG8V5\n\nhttps://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?earth_date=2015-6-3&api_key=bd0FD0AbSf4p0bQrvyDYPoleF38ynj8KejufG8V5\n\nhttps://api.nasa.gov/mars-photos/api/v1/rovers/opportunity/photos?sol=1000&camera=pancam&api_key=bd0FD0AbSf4p0bQrvyDYPoleF38ynj8KejufG8V5\n\nhttps://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&camera=fhaz&api_key=bd0FD0AbSf4p0bQrvyDYPoleF38ynj8KejufG8V5\n\nhttps://api.nasa.gov/mars-photos/api/v1/rovers/curiosity/photos?sol=1000&page=2&api_key=bd0FD0AbSf4p0bQrvyDYPoleF38ynj8KejufG8V5\n\nMainfest API's -\nhttps://api.nasa.gov/mars-photos/api/v1/manifests/perseverance/?api_key=bd0FD0AbSf4p0bQrvyDYPoleF38ynj8KejufG8V5\n\n*/\n","import React from 'react';\nimport '../Mars/Mars.css'\n\nexport default function Rover(props) {\n    const { imagesArray } = props\n    let images = []\n    let date\n\n    for (let index in imagesArray) {\n        const image = imagesArray[index].image\n        const camera = imagesArray[index].camera\n        const rover = imagesArray[index].rover\n        date = imagesArray[index].date\n\n        if (images.indexOf(imagesArray[index].image) === -1) {\n            images.push([image, camera, rover])\n        }\n    }\n    console.log()\n    const imageTotal = imagesArray.length\n\n    return (\n        <div className='image' >\n            <p>{imageTotal} images were captured on {date} </p>\n            {images.map((image, id) =>\n                <figure key={id}>\n                    <img src={image[0]}  alt='Visuals from mars' />\n                    <figcaption>Image captured by the {image[1]} on the {image[2]} rover </figcaption>\n                </figure>\n            )}\n        </div>\n        );\n};\n","import React from 'react';\n\n\n\nexport default function Header() {\n    return (\n        <div className='header'>\n            <h1>Welcome to my NASA Mars Rovers Image Search site!</h1>\n            <p>\n                Search from any of the cameras on any of\n                the four Mars rovers in the Nasa Database using the NASA API.\n            </p>\n            <p>Begin by choosing the rover. Then pick a date from the available service dates for that rover to see all the images captured on that day.</p>\n            <p>Some days have hundreds of images, others have as few as one. </p>\n            <p>If you want to start over, just click 'Reset Rovers' to begin again.</p>\n            <p>The initial images you see are from the latest images sent by the Mars Perserverance Rover</p>\n        </div>\n    );\n};\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { API_KEY } from '../../APIdataJSONS/.keys';\nimport Rover from '../Rover';\nimport Header from '../Header/idex';\nimport './Mars.css'\n\nlet today = new Date()\nlet roverList = ['Perseverance', 'Opportunity', 'Curiosity', 'Spirit']\n\n\nexport default function Mars(props) {\n\n    const [marsPics, setMarsPics] = useState([]);\n    const [rovers, setRover] = useState(roverList)\n    const [roverMessage, setRoverMessage] = useState('Pick a Rover')\n    const [startDate, setStartDate] = useState(today)\n    const [endDate, setEndDate] = useState(today)\n    const [roverSelected, setRoverSelected] = useState(false)\n    const [date, setDate] = useState(today)\n\n    useEffect(() => {\n        axios\n            .get(\n                `https://api.nasa.gov/mars-photos/api/v1/rovers/perseverance/latest_photos?api_key=${API_KEY}`\n            )\n            .then((res) => {\n                console.log(res.data.latest_photos)\n                const num = res.data.latest_photos.length;\n                const images = []\n                const imagesArray = []\n                for (let i = 0; images.length < num; i++) {\n                    let photo = i\n                    images.push(photo)\n                }\n                images.forEach(n => {\n                    const image = res.data.latest_photos[n].img_src\n                    const camera = res.data.latest_photos[n].camera.full_name\n                    const rover = res.data.latest_photos[n].rover.name\n                    const date = res.data.latest_photos[n].earth_date\n                    imagesArray.push({image, camera, rover, date})\n                })\n                setMarsPics(imagesArray);\n            })\n            .catch((err) => console.error(err))\n        }, []);\n\n        const getRoverPics = (e) => {\n            e.preventDefault()\n            axios\n            .get(`https://api.nasa.gov/mars-photos/api/v1/rovers/${rovers}/photos?earth_date=${date}&api_key=${API_KEY}`)\n            .then((res) => {\n                console.log(res.data.photos)\n                const num = res.data.photos.length;\n                const images = []\n                const imagesArray = []\n                console.log(res.data.photos)\n                for (let i = 0; i < num; i++) {\n                    let photo = i\n                    images.push(photo)\n                }\n                images.forEach(n => {\n                    const image = res.data.photos[n].img_src\n                    const camera = res.data.photos[n].camera.full_name\n                    const rover = res.data.photos[n].rover.name\n                    const date = res.data.photos[n].earth_date\n                    imagesArray.push({image, camera, rover, date})\n                })\n                return setMarsPics(imagesArray);\n            })\n            .catch((err) => console.error(err));\n    }\n\n    const handleRover = (e) => {\n        setRover(rovers.filter(rover => e === rover))\n        setRoverMessage('Reset Rovers')\n        setRoverSelected(true)\n\n        axios\n            .get(`https://api.nasa.gov/mars-photos/api/v1/manifests/${e.toLowerCase()}/?api_key=${API_KEY}`)\n            .then((res) => {\n                setStartDate(res.data.photo_manifest.landing_date)\n                setEndDate(res.data.photo_manifest.max_date)\n                console.log(res.data)\n            })\n            .catch((err) => console.error(err))\n\n    };\n\n    const resetRovers = (e) => {\n        e.target = setRover(roverList)\n        setRoverMessage('Pick a Rover')\n        setRoverSelected(false)\n        setDate(today)\n    }\n\n    const datePicker = (e) => {\n        let dateChoice = e.target.value\n        setDate(dateChoice)\n    }\n\n    return (\n        <>\n            <div>\n                <Header />\n            </div>\n            <div className='hubble'>\n                <div>\n                    <section className='title'>\n                        <h4 onClick={resetRovers}>{roverMessage}</h4>\n                        <div className='rover-select'>\n                            {rovers.map((rover, idx) => {\n                                return (\n                                    <div className='rover' key={idx} onClick={() => handleRover(rover)}>{rover}</div>\n                                )\n                            })}\n                        </div>\n                    </section>\n                    {roverSelected && <section className='date'>\n                        <form className='date-select'>\n                            <h4>Pick a Day</h4>\n                            <input\n                                id='date'\n                                type='date'\n                                min={startDate}\n                                max={endDate}\n                                value={date}\n                                onChange={datePicker}\n                            />\n                        </form>\n                        <button className='rover-button' onClick={getRoverPics}>Get Images</button>\n                    </section>}\n                </div>\n            </div>\n            <div className='images'>\n                    <Rover\n                        imagesArray={marsPics}\n                        date={date}\n                    />\n                </div>\n        </>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport Mars from './Components/Mars';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <Mars />\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { ThemeProvider } from 'styled-components';\nimport theme from './theme';\n\nReactDOM.render(\n    <ThemeProvider theme={theme}>\n        <App />\n    </ThemeProvider>,\n    document.getElementById('root')\n);\n","export default {\n  primaryColor: 'darkgrey',\n  secondaryColor: 'black',\n  tertiaryColor: 'midnightblue',\n  black: 'black',\n  white: 'almond',\n  breakpointMobile: '(max-width: 600px)'\n}\n"],"sourceRoot":""}